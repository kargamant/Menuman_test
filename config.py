import logging
#–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º executor –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Å—Ç–∏ —à–∞–±–ª–æ–Ω –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Ç–∞,
# –∫–ª–∞—Å—Å—ã Bot –∏ dispatcher –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥–µ –∏ –∫–ª–∞—Å—Å types –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞(message, photo etc.)
from aiogram import Bot, Dispatcher, executor, types
import json
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = '1952101924:AAE65-LCPw12Bn6U_S5ImLM32yJfHvfB0L4'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


kb = ReplyKeyboardMarkup(resize_keyboard=True)

kbi = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

last_message = ''

client_onload = {}

n_elka = 1

answ_ar = ['–ø–ª–æ—Ç–Ω–æ', '–ø–µ—Ä–µ–∫—É—Å', '—è–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è',
           '–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è',
           '—è–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '—Ä–∞–∑–Ω–æ–µ', '—Ñ—Ä–∞–Ω—Ü—É–∑–∫–∞—è –∫—É—Ö–Ω—è',
           '—Ä—ã–±–∞', '–º—è—Å–æ', '–ø—Ç–∏—Ü–∞', 'vega', '–¥–∞', '–Ω–µ—Ç']
answ_var = {
    '–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è': '–∫—É—Ö–Ω—è',
    '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è': '–∫—É—Ö–Ω—è',
    '—Ä–∞–∑–Ω–æ–µ': '–∫—É—Ö–Ω—è',
    '—Ñ—Ä–∞–Ω—Ü—É–∑–∫–∞—è –∫—É—Ö–Ω—è': '–∫—É—Ö–Ω—è',
    '—è–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è': '–∫—É—Ö–Ω—è',
    '—Å—ã—Ç–Ω–æ':'—Å—ã—Ç–Ω–æ—Å—Ç—å',
    '–Ω–µ —Å—ã—Ç–Ω–æ': '—Å—ã—Ç–Ω–æ—Å—Ç—å',
    '–º—è—Å–æ':'–º—è—Å–æ',
    '—Ä—ã–±–∞':'–º—è—Å–æ',
    '–ø—Ç–∏—Ü–∞':'–º—è—Å–æ',
    'vega':'–º—è—Å–æ',
    '–¥–∞': '—Å–∞—Ö–∞—Ä',
    '–Ω–µ—Ç':'—Å–∞—Ö–∞—Ä'
            }

client_answ = {'–∫—É—Ö–Ω—è':'', '—Å—ã—Ç–Ω–æ—Å—Ç—å':'', '–º—è—Å–æ': '', '—Å–∞—Ö–∞—Ä': ''}

questions = ['–í—ã –∂–µ–ª–∞–µ—Ç–µ –ø–ª–æ—Ç–Ω–æ –ø–æ–µ—Å—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å?',
             '–ê –∫–∞–∫—É—é –∫—É—Ö–Ω—é –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?',
             '–ö–∞–∫–æ–π –≤–∏–¥ –º—è—Å–∞ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–µ—Å—Ç—å?\n\n–ï—Å–ª–∏ –≤—ã –≤–µ–≥–∏—Ç–∞—Ä–∏–∞–Ω–µ—Ü, –≤—ã–±–µ—Ä–∏—Ç–µ Vega',
             '–ï–¥–∏—Ç–µ –ª–∏ –≤—ã –±–ª—é–¥–∞ —Å —Å–∞—Ö–∞—Ä–æ–º?'
             ]
photos = {
    "–°—É—à–∏ —Å –ª–æ—Å–æ—Å–µ–º": '365–°–ª–∏–≤–æ—á–Ω—ã–∏ÃÜ_–ª–æ—Å–æ—Å—å.jpg',
    "–°—Ç–µ–π–∫ —Ä–∏–±–∞–π": '217bb0ad4ece0ad526db6763b5526136.jpg',
    "–°–∞–ª–∞—Ç —Å —Ö—É–º—É—Å–æ–º –∏ —Ñ–∞–ª–∞—Ñ–µ–ª–µ–º": 'fal11-zahod.jpg',
    "—Ç–æ—Ä—Ç –ù–∞–ø–æ–ª–µ–æ–Ω": 'DSCF0760-1.jpg',
    "–ö—É—Ä–∏–Ω—ã–µ –∫—Ä—ã–ª—ã—à–∫–∏ –ë–∞—Ñ—Ñ–∞–ª–æ":'franks_redhot_buffalo_chicken_wings_043-601x601.jpg',
    "–ö–æ–∫–æ—Å–æ–≤–æ–µ –º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ":'domashnee-morojenoe-iz-kokosovogo-moloka_1567669131_9_max.jpg',
    "–•–ª–µ–±–Ω—ã–µ –≥—Ä–µ–Ω–∫–∏ —Å —á–µ—Å–Ω–æ–∫–æ–º": 'grenki-s-chesnokom.jpg',
    "–ü–∏—Ä–æ–∂–µ–Ω–Ω–æ–µ –ë—Ä–∞—É–Ω–∏": 'unnamed.jpg',
    "–ü–∏—Ü—Ü–∞ –ø–µ–ø–ø–µ—Ä–æ–Ω–∏": 'p_O.jpg'
}


buttons = [
    ['—Å—ã—Ç–Ω–æ', '–Ω–µ —Å—ã—Ç–Ω–æ'],
    [
    '—è–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è',
    '–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è',
    '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è',
    '—Ä–∞–∑–Ω–æ–µ',
    '—Ñ—Ä–∞–Ω—Ü—É–∑–∫–∞—è –∫—É—Ö–Ω—è'
    ],
    [
        '—Ä—ã–±–∞',
        '–º—è—Å–æ',
        '–ø—Ç–∏—Ü–∞',
        'vega'
    ],
    [
        '–¥–∞',
        '–Ω–µ—Ç'
    ]
]

elka_ar = [0]

def boot():
    menu = KeyboardButton('/menu')
    order = KeyboardButton('/order')
    rec = KeyboardButton('/rec')
    kb.add(menu)
    kb.add(order)
    kb.add(rec)




@dp.message_handler(commands=['start'])
async def greetings(message:types.Message):
        last_message = message.text
        await message.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ!\n'
                            '\n'
                            '–Ø - –≤–∞—à –±–æ—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º –∏ –∑–∞–∫–∞–∑–æ–ºüòâ\n'
                            '–í–æ—Ç, —á—Ç–æ —è —É–º–µ—é:\n'
                            '\n'
                            '/menu - –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞üçï\n'
                            '/order - —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑üìÉ\n'
                            '/rec - –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å\n'
                            '\n'
                            '–ï—Å–ª–∏ —É–∂–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å, —Ç–æ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å \"–Ø —Ö–æ—á—É\", –∞ –¥–∞–ª—å—à–µ —Å–≤–æ–π –∑–∞–∫–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                            '\n'
                            '–±–ª—é–¥–æ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π,\n'
                            '–±–ª—é–¥–æ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –∏ —Ç.–¥.\n'
                            '\n'
                            '–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞–∫–∞–∑–∞ —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /order ', reply_markup=kb)

@dp.message_handler(commands=['menu'])
async def menu(message:types.Message):
    last_message = message.text
    with open('menu', 'r', encoding='utf-8') as file:
        await message.reply('–ù–∞—à–µ –º–µ–Ω—é: \n \n' + str(file.read()) + '\n\n' + '–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–∂–º–∏—Ç–µ /rec')

@dp.message_handler(commands=['order'])
async def order(message: types.Message):
    with open('order_example.jpg', 'rb') as photo:
        await bot.send_photo(message.chat.id, photo,'–ù–∞—á–Ω–∏—Ç–µ —Å–æ —Å–ª–æ–≤ \"–Ø —Ö–æ—á—É \", –∞ –¥–∞–ª—å—à–µ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –±–ª—é–¥, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ')

@dp.message_handler(commands=['rec'])
async def menu(message: types.Message):
    kbi = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for k in buttons[elka_ar[0]]:
        kbi.add(KeyboardButton(k))
    await bot.send_message(message.chat.id, '–í—ã –∂–µ–ª–∞–µ—Ç–µ –ø–ª–æ—Ç–Ω–æ –ø–æ–µ—Å—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å?', reply_markup=kbi)
    '''@dp.message_handler(content_types=['text'])
            async def elka_2(message):
                kbi.add(KeyboardButton('—è–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è'))
                await bot.send_message(message.chat.id, '–ê –∫–∞–∫—É—é –∫—É—Ö–Ω—é –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?', reply_markup=kbi)'''


elka = 1

def rec_sort(client_d):
    best_var = ''
    score = 0
    max_score = 100000000
    with open('products.json', 'rb') as file:
        content = json.load(file)
    for pro_i in content:
        differ = []
        for k in pro_i.values():
            for j in client_d.values():
                if k!=j:
                    differ.append(k)
        score = len(differ)
        if score < max_score:
            max_score = score
            best_var = pro_i["–ù–∞–∑–≤–∞–Ω–∏–µ"]
        else:
            continue
    return best_var


@dp.message_handler(content_types=['text'])
async def ordtext(message: types.Message):
    txt = str(message.text).lower()
    if '—è —Ö–æ—á—É' in txt.lower():
        txt = txt.replace('—è —Ö–æ—á—É ', '')
        txt = txt.replace('—è —Ö–æ—á—É\n', '')
        data = txt.split(',')
        onload = {'id': message.from_user.id, '–±–ª—é–¥–∞': '', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': ''}
        dumb = []
        print(onload)
        with open('orders.json', 'w', encoding='utf-8') as datafile:
            for i in data:
                onld = i.split(' - ')
                onload_copy = onload.copy()
                onload_copy['–±–ª—é–¥–∞'] = onld[0].replace('\n', '')
                onload_copy['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = onld[1]
                print(onload)
                dumb.append(onload_copy)
                print(dumb)

            print(dumb)
            json.dump(dumb, datafile, ensure_ascii=False, indent=4)
        await message.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!')
    if txt in answ_var:
        client_answ[answ_var[txt]] = txt
        print(client_answ)
        if elka_ar[0] == len(questions)-1:
            result = rec_sort(client_answ)
            print(result)
            elka_ar[0] = 0
            #await bot.send_message(message.chat.id, f'–ß—Ç–æ–∂, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å {result}')
            with open(photos[result], 'rb') as file:
                await bot.send_photo(message.chat.id, file, caption=f'–ß—Ç–æ–∂, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å {result}')
        else:
            if elka_ar[0]\
                    != len(buttons)-1:
                kbi = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
                for k in buttons[elka_ar[0]+1]:
                    kbi.add(KeyboardButton(k))
                await bot.send_message(message.chat.id, questions[elka_ar[0]+1], reply_markup=kbi)
            else:
                await bot.send_message(message.chat.id, questions[elka_ar[0]+1])
            elka_ar[0] += 1
    #elif txt not in answ_var and not(txt.startswith('—è —Ö–æ—á—É')):
        #await bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é')

if __name__ == '__main__':
    boot()
    #inl_boot()
    executor.start_polling(dp, skip_updates=True)
